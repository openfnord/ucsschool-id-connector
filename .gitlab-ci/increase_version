#!/usr/bin/env python3

import argparse
import re
import sys

from packaging.version import Version

CONF_PY = "docs/conf.py"
INI_FILE = "appcenter_scripts/ucsschool-id-connector.ini"
VERSION_TXT_FILE = "VERSION.txt"


def _check_version_is_higher(current_version: str, target_version: str, filename: str):
    if Version(current_version) >= Version(target_version):
        print(
            f"{filename}: Target version must be higher than current version: "
            f"{current_version} >= {target_version}"
        )
        sys.exit(1)


def _increase_version_txt(target_version: str):
    with open(VERSION_TXT_FILE) as fin:
        current_version = fin.read().strip()
    _check_version_is_higher(
        current_version=current_version, target_version=target_version, filename=VERSION_TXT_FILE
    )
    with open(VERSION_TXT_FILE, "w") as fout:
        fout.write(f"{target_version}\n")


def _adapt_conf_py(target_version: str):
    with open(CONF_PY) as fin:
        text = fin.read()
        current_version = re.search(r'release = "([^\"].+)"', text).group(1)
        _check_version_is_higher(
            current_version=current_version, target_version=target_version, filename=CONF_PY
        )
        text = re.sub(r'release = "[^\"].+"', f'release = "{target_version}"', text)
    with open(CONF_PY, "w") as fout:
        fout.write(text)


def _adapt_ini_file(target_version):
    with open(INI_FILE) as fin:
        text = fin.read()
        current_version = re.search(r"Version = ([^\n].+)\n", text).group(1)
        _check_version_is_higher(
            current_version=current_version, target_version=target_version, filename=INI_FILE
        )
        text = re.sub(r"Version = [^\n].+", f"Version = {target_version}", text)
    with open(INI_FILE, "w") as fout:
        fout.write(text)


def increase_version(target_version):
    target_version = target_version.strip()
    _increase_version_txt(target_version)
    _adapt_ini_file(target_version)
    _adapt_conf_py(target_version)
    print(f"Updated version strings to {target_version}")
    sys.exit(0)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        prog="increase_version", description="Increases all version strings to a given target version."
    )
    parser.add_argument("-t", "--target_version", required=True)
    args = parser.parse_args()
    increase_version(args.target_version)
