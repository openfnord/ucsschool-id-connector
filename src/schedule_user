#!/id-sync/venv/bin/python3
# -*- coding: utf-8 -*-

# Copyright 2019 Univention GmbH
#
# http://www.univention.de/
#
# All rights reserved.
#
# The source code of this program is made available
# under the terms of the GNU Affero General Public License version 3
# (GNU AGPL V3) as published by the Free Software Foundation.
#
# Binary versions of this program provided by Univention to you as
# well as other copyrighted, protected or trademarked materials like
# Logos, graphics, fonts, specific documentations and configurations,
# cryptographic keys etc. are subject to a license agreement between
# you and Univention and not subject to the GNU AGPL V3.
#
# In the case you use this program under the terms of the GNU AGPL V3,
# the program is provided in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public
# License with the Debian GNU/Linux or Univention distribution in file
# /usr/share/common-licenses/AGPL-3; if not, see
# <http://www.gnu.org/licenses/>.

"""
Find users in LDAP and add them to the in queue.
"""

import asyncio
import datetime
from pathlib import Path
from typing import AsyncIterator, Union

import aiofiles
import click
import ujson
from async_property import async_cached_property

from id_sync.constants import APPCENTER_LISTENER_PATH, LOG_FILE_PATH_QUEUES
from id_sync.ldap_access import LDAPAccess
from id_sync.models import User
from id_sync.utils import ConsoleAndFileLogging

logger = ConsoleAndFileLogging.get_logger(Path(__file__).name, LOG_FILE_PATH_QUEUES)
ConsoleAndFileLogging.add_console_handler(logger)


class TimeEventScheduler:
    def __init__(self):
        self.ldap_access = LDAPAccess()

    async def get_user_from_ldap(self, username: str) -> Union[User, None]:
        return await self.ldap_access.get_user(username, attributes=["*", "entryUUID"])

    @async_cached_property
    async def uuid_ldap_attr(self):
        """
        Name of the LDAP attribute that the extended attribute `UUID` is
        stored in.
        """
        return await self.ldap_access.extended_attribute_ldap_mapping("UUID")

    async def get_users_from_ldap(self) -> AsyncIterator[User]:
        filter_s = ""
        logger.debug("LDAP filter: %r", filter_s)
        for result in await self.ldap_access.search(filter_s, ["*", "entryUUID"]):
            yield User(
                username=result["uid"].value,
                full_name=result["displayName"].value,
                disabled=self.ldap_access.user_is_disabled(result),
                dn=result.entry_dn,
                attributes=result.entry_attributes_as_dict,
            )

    @staticmethod
    async def write_listener_file(user: User) -> None:
        """
        Create JSON file to trigger appcenter converter service to create JSON
        file for our app container.

        We cannot create listener files (`ListenerObject`) like the appcenter
        converter service does, because we don't have UDM. So we'll create the
        files the appcenter listener creates. They will trigger the appcenter
        converter service to write the listener files (`ListenerObject`).

        This is what the appcenter listener does in
        management/univention-appcenter/python/appcenter/listener.py in
        `AppListener._write_json()`.
        """
        attrs = {
            "entry_uuid": user.attributes["entryUUID"][0],
            "dn": user.dn,
            "object_type": "users/user",
            "command": "m",
        }
        json_s = ujson.dumps(attrs, sort_keys=True, indent=4)
        timestamp = datetime.datetime.now().strftime("%Y-%m-%d-%H-%M-%S-%f")
        path = Path(APPCENTER_LISTENER_PATH, f"{timestamp}.json")
        async with aiofiles.open(path, "w") as fp:
            await fp.write(json_s)

    async def queue_user(self, username: str) -> None:
        logger.debug("Searching LDAP for user with username %r...", username)
        user = await self.get_user_from_ldap(username)
        if user:
            logger.info("Adding user to in-queue: %s.", user.username)
            # logger.debug("UUID: %r", uuid[0] if uuid else uuid)
            await self.write_listener_file(user)
        else:
            logger.error("No user with username %r could be found.", username)
        logger.debug("Done.")


@click.command(help="Schedule distribution of a user.")
@click.argument("username")
def schedule(username: str = None):
    scheduler = TimeEventScheduler()
    asyncio.run(scheduler.queue_user(username))


if __name__ == "__main__":
    schedule()
