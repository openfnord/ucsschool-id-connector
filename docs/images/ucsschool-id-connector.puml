' Like what you see? Join us!
' https://www.univention.com/about-us/careers/vacancies/
'
' Copyright (C) 2021-2023 Univention GmbH
'
' SPDX-License-Identifier: AGPL-3.0-only
'
' https://www.univention.com/
'
' All rights reserved.
'
' The source code of this program is made available under the terms of
' the GNU Affero General Public License v3.0 only (AGPL-3.0-only) as
' published by the Free Software Foundation.
'
' Binary versions of this program provided by Univention to you as
' well as other copyrighted, protected or trademarked materials like
' Logos, graphics, fonts, specific documentations and configurations,
' cryptographic keys etc. are subject to a license agreement between
' you and Univention and not subject to the AGPL-3.0-only.
'
' In the case you use this program under the terms of the AGPL-3.0-only,
' the program is provided in the hope that it will be useful, but
' WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
' Affero General Public License for more details.
'
' You should have received a copy of the GNU Affero General Public
' License with the Debian GNU/Linux or Univention distribution in file
' /usr/share/common-licenses/AGPL-3; if not, see
' <https://www.gnu.org/licenses/agpl-3.0.txt>.

@startuml


skinparam defaultTextAlignment center

skinparam AgentBackgroundColor #438dd5
skinparam AgentFontColor white
skinparam AgentBorderColor #6a8198

skinparam StorageBackgroundColor #85bbf0
skinparam DatabaseBackgroundColor #85bbf0
skinparam FolderBackgroundColor #b0cae4
skinparam FileBackgroundColor lightgrey

skinparam ArrowColor #666666
skinparam ArrowFontColor #666666

skinparam FrameBackgroundColor #ebedf1


' <b>\n<i>\n\n

agent "<b>School management software\n<i>custom system\n\nmanages users on state level" as sms

storage "<b>UCS@School import\n<i>python\n\nImport user data" as import

database "<b>LDAP\n<i>openldap\n\nholds the user\n data" as ldap

storage "<b>ID-Connector listener\n<i>python listener script\n\nHandles write events\nto ldap for id-connector" as id_connector_listener

agent "<b>Cronjob\n<i>python\n\nTrigger user changes\naccording to validity period" as cronjob

folder "<b>Small in-queue\n<i>Folder\n\njson files with\nentryUUIDs" as small_in_queue

storage "<b>UDM REST API\n<i>tornado\n\nenriches ldap access\nwith ucs specific logic" as udm_rest_api



agent "<b>Daemon\n<i>python\n\nReads uuid and writes\njson representation of udm\nobjects" as daemon

frame ID-Connector {



    agent "<b>Management REST API\n<i>fastapi\n\nstops events from\nreaching ldap" as management_api

    folder "<b>Large in-queue\n<i>Folder\n\njson files with full data" as large_in_queue

    database "<b>UUID record cache\n<i>sqlite\n\nstores uuid->\n(record_uid,school, ...) \nmapping" as uuid_record_cache

    agent "<b>Async job\n<i>python\n\nputs json files into right\n out queue" as async_job

    folder "out_queue_a" as out_queue_a

    folder "out_queue_b" as out_queue_b

    agent "out_a" as out_a

    agent "out_b" as out_b

}

storage "school_provider_a" as school_provider_a

storage "school_provider_b" as school_provider_b

sms --> import : <b>export of user data\n<i>python
import --> ldap
ldap --> id_connector_listener : <b>calls listener on write\n<i>python
id_connector_listener --> small_in_queue: <b>Write entryUUIDs\n<i>json
cronjob --> small_in_queue: <b>Write entryUUIDs\n<i>json
small_in_queue <-- daemon: <b>Read entryUUIDS\n<i>python
'daemon-up->small_in_queue
daemon --> large_in_queue
'large_in_queue <-->uuid_record_cache
 uuid_record_cache <--> large_in_queue
large_in_queue <-- async_job
async_job --> out_queue_a
out_queue_a --> out_a
out_a --> school_provider_a
async_job --> out_queue_b
out_queue_b --> out_b
out_b --> school_provider_b
daemon --> udm_rest_api
udm_rest_api --> ldap: <b>Read/write user data\n<i>python-ldap
management_api --> udm_rest_api
large_in_queue <-- management_api
management_api --> out_queue_a
management_api --> out_queue_b



folder Test {
    File entryUUIDs
}

@enduml
